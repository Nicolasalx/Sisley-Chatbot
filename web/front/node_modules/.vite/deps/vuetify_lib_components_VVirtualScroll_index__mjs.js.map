{
  "version": 3,
  "sources": ["../../vuetify/src/components/VVirtualScroll/VVirtualScroll.tsx", "../../vuetify/src/components/VVirtualScroll/VVirtualScrollItem.tsx", "../../vuetify/src/composables/virtual.ts"],
  "sourcesContent": ["// Styles\nimport './VVirtualScroll.sass'\n\n// Components\nimport { VVirtualScrollItem } from './VVirtualScrollItem'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useToggleScope } from '@/composables/toggleScope'\nimport { makeVirtualProps, useVirtual } from '@/composables/virtual'\n\n// Utilities\nimport { onMounted, onScopeDispose, toRef } from 'vue'\nimport {\n  convertToUnit,\n  genericComponent,\n  getCurrentInstance,\n  getScrollParent,\n  propsFactory,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport interface VVirtualScrollSlot<T> {\n  item: T\n  index: number\n}\n\nexport const makeVVirtualScrollProps = propsFactory({\n  items: {\n    type: Array as PropType<readonly unknown[]>,\n    default: () => ([]),\n  },\n  renderless: Boolean,\n\n  ...makeVirtualProps(),\n  ...makeComponentProps(),\n  ...makeDimensionProps(),\n}, 'VVirtualScroll')\n\nexport const VVirtualScroll = genericComponent<new <T, Renderless extends boolean = false>(\n  props: {\n    items?: readonly T[]\n    renderless?: Renderless\n  },\n  slots: {\n    default: VVirtualScrollSlot<T> & (Renderless extends true ? {\n      itemRef: Ref<HTMLElement | undefined>\n    } : {})\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScroll',\n\n  props: makeVVirtualScrollProps(),\n\n  setup (props, { slots }) {\n    const vm = getCurrentInstance('VVirtualScroll')\n    const { dimensionStyles } = useDimension(props)\n    const {\n      containerRef,\n      markerRef,\n      handleScroll,\n      handleScrollend,\n      handleItemResize,\n      scrollToIndex,\n      paddingTop,\n      paddingBottom,\n      computedItems,\n    } = useVirtual(props, toRef(props, 'items'))\n\n    useToggleScope(() => props.renderless, () => {\n      function handleListeners (add = false) {\n        const method = add ? 'addEventListener' : 'removeEventListener'\n\n        if (containerRef.value === document.documentElement) {\n          document[method]('scroll', handleScroll, { passive: true })\n          document[method]('scrollend', handleScrollend)\n        } else {\n          containerRef.value?.[method]('scroll', handleScroll, { passive: true })\n          containerRef.value?.[method]('scrollend', handleScrollend)\n        }\n      }\n\n      onMounted(() => {\n        containerRef.value = getScrollParent(vm.vnode.el as HTMLElement, true)\n        handleListeners(true)\n      })\n      onScopeDispose(handleListeners)\n    })\n\n    useRender(() => {\n      const children = computedItems.value.map(item => (\n        <VVirtualScrollItem\n          key={ item.index }\n          renderless={ props.renderless }\n          onUpdate:height={ height => handleItemResize(item.index, height) }\n        >\n          { slotProps => slots.default?.({ item: item.raw, index: item.index, ...slotProps }) }\n        </VVirtualScrollItem>\n      ))\n\n      return props.renderless ? (\n        <>\n          <div ref={ markerRef } class=\"v-virtual-scroll__spacer\" style={{ paddingTop: convertToUnit(paddingTop.value) }} />\n          { children }\n          <div class=\"v-virtual-scroll__spacer\" style={{ paddingBottom: convertToUnit(paddingBottom.value) }} />\n        </>\n      ) : (\n        <div\n          ref={ containerRef }\n          class={[\n            'v-virtual-scroll',\n            props.class,\n          ]}\n          onScrollPassive={ handleScroll }\n          onScrollend={ handleScrollend }\n          style={[\n            dimensionStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            ref={ markerRef }\n            class=\"v-virtual-scroll__container\"\n            style={{\n              paddingTop: convertToUnit(paddingTop.value),\n              paddingBottom: convertToUnit(paddingBottom.value),\n            }}\n          >\n            { children }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      scrollToIndex,\n    }\n  },\n})\n\nexport type VVirtualScroll = InstanceType<typeof VVirtualScroll>\n", "// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { watch } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { GenericProps, TemplateRef } from '@/util'\n\nexport const makeVVirtualScrollItemProps = propsFactory({\n  renderless: Boolean,\n\n  ...makeComponentProps(),\n}, 'VVirtualScrollItem')\n\nexport const VVirtualScrollItem = genericComponent<new <Renderless extends boolean = false>(\n  props: {\n    renderless?: Renderless\n  },\n  slots: {\n    default: Renderless extends true ? {\n      itemRef: TemplateRef\n    } : never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScrollItem',\n\n  inheritAttrs: false,\n\n  props: makeVVirtualScrollItemProps(),\n\n  emits: {\n    'update:height': (height: number) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { resizeRef, contentRect } = useResizeObserver(undefined, 'border')\n\n    watch(() => contentRect.value?.height, height => {\n      if (height != null) emit('update:height', height)\n    })\n\n    useRender(() => props.renderless ? (\n      <>\n        { slots.default?.({ itemRef: resizeRef }) }\n      </>\n    ) : (\n      <div\n        ref={ resizeRef }\n        class={[\n          'v-virtual-scroll__item',\n          props.class,\n        ]}\n        style={ props.style }\n        { ...attrs }\n      >\n        { (slots.default as any)?.() }\n      </div>\n    ))\n  },\n})\n", "// Composables\nimport { useDisplay } from '@/composables/display'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { computed, nextTick, onScopeDispose, ref, shallowRef, watch, watchEffect } from 'vue'\nimport { clamp, debounce, IN_BROWSER, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nconst UP = -1\nconst DOWN = 1\n\n/** Determines how large each batch of items should be */\nconst BUFFER_PX = 100\n\ntype VirtualProps = {\n  itemHeight?: number | string\n  height?: number | string\n}\n\nexport const makeVirtualProps = propsFactory({\n  itemHeight: {\n    type: [Number, String],\n    default: null,\n  },\n  height: [Number, String],\n}, 'virtual')\n\nexport function useVirtual <T> (props: VirtualProps, items: Ref<readonly T[]>) {\n  const display = useDisplay()\n\n  const itemHeight = shallowRef(0)\n  watchEffect(() => {\n    itemHeight.value = parseFloat(props.itemHeight || 0)\n  })\n\n  const first = shallowRef(0)\n  const last = shallowRef(Math.ceil(\n    // Assume 16px items filling the entire screen height if\n    // not provided. This is probably incorrect but it minimises\n    // the chance of ending up with empty space at the bottom.\n    // The default value is set here to avoid poisoning getSize()\n    (parseInt(props.height!) || display.height.value) / (itemHeight.value || 16)\n  ) || 1)\n  const paddingTop = shallowRef(0)\n  const paddingBottom = shallowRef(0)\n\n  /** The scrollable element */\n  const containerRef = ref<HTMLElement>()\n  /** An element marking the top of the scrollable area,\n   * used to add an offset if there's padding or other elements above the virtual list */\n  const markerRef = ref<HTMLElement>()\n  /** markerRef's offsetTop, lazily evaluated */\n  let markerOffset = 0\n\n  const { resizeRef, contentRect } = useResizeObserver()\n  watchEffect(() => {\n    resizeRef.value = containerRef.value\n  })\n  const viewportHeight = computed(() => {\n    return containerRef.value === document.documentElement\n      ? display.height.value\n      : contentRect.value?.height || parseInt(props.height!) || 0\n  })\n  /** All static elements have been rendered and we have an assumed item height */\n  const hasInitialRender = computed(() => {\n    return !!(containerRef.value && markerRef.value && viewportHeight.value && itemHeight.value)\n  })\n\n  let sizes = Array.from<number | null>({ length: items.value.length })\n  let offsets = Array.from<number>({ length: items.value.length })\n  const updateTime = shallowRef(0)\n  let targetScrollIndex = -1\n\n  function getSize (index: number) {\n    return sizes[index] || itemHeight.value\n  }\n\n  const updateOffsets = debounce(() => {\n    const start = performance.now()\n    offsets[0] = 0\n    const length = items.value.length\n    for (let i = 1; i <= length - 1; i++) {\n      offsets[i] = (offsets[i - 1] || 0) + getSize(i - 1)\n    }\n    updateTime.value = Math.max(updateTime.value, performance.now() - start)\n  }, updateTime)\n\n  const unwatch = watch(hasInitialRender, v => {\n    if (!v) return\n    // First render is complete, update offsets and visible\n    // items in case our assumed item height was incorrect\n\n    unwatch()\n    markerOffset = markerRef.value!.offsetTop\n    updateOffsets.immediate()\n    calculateVisibleItems()\n\n    if (!~targetScrollIndex) return\n\n    nextTick(() => {\n      IN_BROWSER && window.requestAnimationFrame(() => {\n        scrollToIndex(targetScrollIndex)\n        targetScrollIndex = -1\n      })\n    })\n  })\n\n  onScopeDispose(() => {\n    updateOffsets.clear()\n  })\n\n  function handleItemResize (index: number, height: number) {\n    const prevHeight = sizes[index]\n    const prevMinHeight = itemHeight.value\n\n    itemHeight.value = prevMinHeight ? Math.min(itemHeight.value, height) : height\n\n    if (prevHeight !== height || prevMinHeight !== itemHeight.value) {\n      sizes[index] = height\n      updateOffsets()\n    }\n  }\n\n  function calculateOffset (index: number) {\n    index = clamp(index, 0, items.value.length - 1)\n    return offsets[index] || 0\n  }\n\n  function calculateIndex (scrollTop: number) {\n    return binaryClosest(offsets, scrollTop)\n  }\n\n  let lastScrollTop = 0\n  let scrollVelocity = 0\n  let lastScrollTime = 0\n\n  watch(viewportHeight, (val, oldVal) => {\n    if (oldVal) {\n      calculateVisibleItems()\n      if (val < oldVal) {\n        requestAnimationFrame(() => {\n          scrollVelocity = 0\n          calculateVisibleItems()\n        })\n      }\n    }\n  })\n\n  function handleScroll () {\n    if (!containerRef.value || !markerRef.value) return\n\n    const scrollTop = containerRef.value.scrollTop\n    const scrollTime = performance.now()\n    const scrollDeltaT = scrollTime - lastScrollTime\n\n    if (scrollDeltaT > 500) {\n      scrollVelocity = Math.sign(scrollTop - lastScrollTop)\n\n      // Not super important, only update at the\n      // start of a scroll sequence to avoid reflows\n      markerOffset = markerRef.value.offsetTop\n    } else {\n      scrollVelocity = scrollTop - lastScrollTop\n    }\n\n    lastScrollTop = scrollTop\n    lastScrollTime = scrollTime\n\n    calculateVisibleItems()\n  }\n  function handleScrollend () {\n    if (!containerRef.value || !markerRef.value) return\n\n    scrollVelocity = 0\n    lastScrollTime = 0\n\n    calculateVisibleItems()\n  }\n\n  let raf = -1\n  function calculateVisibleItems () {\n    cancelAnimationFrame(raf)\n    raf = requestAnimationFrame(_calculateVisibleItems)\n  }\n  function _calculateVisibleItems () {\n    if (!containerRef.value || !viewportHeight.value) return\n    const scrollTop = lastScrollTop - markerOffset\n    const direction = Math.sign(scrollVelocity)\n\n    const startPx = Math.max(0, scrollTop - BUFFER_PX)\n    const start = clamp(calculateIndex(startPx), 0, items.value.length)\n\n    const endPx = scrollTop + viewportHeight.value + BUFFER_PX\n    const end = clamp(calculateIndex(endPx) + 1, start + 1, items.value.length)\n\n    if (\n      // Only update the side we're scrolling towards,\n      // the other side will be updated incidentally\n      (direction !== UP || start < first.value) &&\n      (direction !== DOWN || end > last.value)\n    ) {\n      const topOverflow = calculateOffset(first.value) - calculateOffset(start)\n      const bottomOverflow = calculateOffset(end) - calculateOffset(last.value)\n      const bufferOverflow = Math.max(topOverflow, bottomOverflow)\n\n      if (bufferOverflow > BUFFER_PX) {\n        first.value = start\n        last.value = end\n      } else {\n        // Only update the side that's reached its limit if there's still buffer left\n        if (start <= 0) first.value = start\n        if (end >= items.value.length) last.value = end\n      }\n    }\n\n    paddingTop.value = calculateOffset(first.value)\n    paddingBottom.value = calculateOffset(items.value.length) - calculateOffset(last.value)\n  }\n\n  function scrollToIndex (index: number) {\n    const offset = calculateOffset(index)\n    if (!containerRef.value || (index && !offset)) {\n      targetScrollIndex = index\n    } else {\n      containerRef.value.scrollTop = offset\n    }\n  }\n\n  const computedItems = computed(() => {\n    return items.value.slice(first.value, last.value).map((item, index) => ({\n      raw: item,\n      index: index + first.value,\n    }))\n  })\n\n  watch(items, () => {\n    sizes = Array.from({ length: items.value.length })\n    offsets = Array.from({ length: items.value.length })\n    updateOffsets.immediate()\n    calculateVisibleItems()\n  }, { deep: true })\n\n  return {\n    containerRef,\n    markerRef,\n    computedItems,\n    paddingTop,\n    paddingBottom,\n    scrollToIndex,\n    handleScroll,\n    handleScrollend,\n    handleItemResize,\n  }\n}\n\n// https://gist.github.com/robertleeplummerjr/1cc657191d34ecd0a324\nfunction binaryClosest (arr: ArrayLike<number>, val: number) {\n  let high = arr.length - 1\n  let low = 0\n  let mid = 0\n  let item = null\n  let target = -1\n\n  if (arr[high]! < val) {\n    return high\n  }\n\n  while (low <= high) {\n    mid = (low + high) >> 1\n    item = arr[mid]!\n\n    if (item > val) {\n      high = mid - 1\n    } else if (item < val) {\n      target = mid\n      low = mid + 1\n    } else if (item === val) {\n      return mid\n    } else {\n      return low\n    }\n  }\n\n  return target\n}\n"],
  "mappings": "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",
  "names": ["makeVVirtualScrollItemProps", "propsFactory", "renderless", "Boolean", "makeComponentProps", "VVirtualScrollItem", "genericComponent", "name", "inheritAttrs", "props", "emits", "height", "setup", "_ref", "attrs", "emit", "slots", "resizeRef", "contentRect", "useResizeObserver", "undefined", "watch", "value", "useRender", "_createVNode", "_Fragment", "default", "itemRef", "_mergeProps", "class", "style", "UP", "DOWN", "BUFFER_PX", "makeVirtualProps", "propsFactory", "itemHeight", "type", "Number", "String", "default", "height", "useVirtual", "props", "items", "display", "useDisplay", "shallowRef", "watchEffect", "value", "parseFloat", "first", "last", "Math", "ceil", "parseInt", "paddingTop", "paddingBottom", "containerRef", "ref", "markerRef", "markerOffset", "resizeRef", "contentRect", "useResizeObserver", "viewportHeight", "computed", "document", "documentElement", "hasInitialRender", "sizes", "Array", "from", "length", "offsets", "updateTime", "targetScrollIndex", "getSize", "index", "updateOffsets", "debounce", "start", "performance", "now", "i", "max", "unwatch", "watch", "v", "offsetTop", "immediate", "calculateVisibleItems", "nextTick", "IN_BROWSER", "window", "requestAnimationFrame", "scrollToIndex", "onScopeDispose", "clear", "handleItemResize", "prevHeight", "prevMinHeight", "min", "calculateOffset", "clamp", "calculateIndex", "scrollTop", "binaryClosest", "lastScrollTop", "scrollVelocity", "lastScrollTime", "val", "oldVal", "handleScroll", "scrollTime", "scrollDeltaT", "sign", "handleScrollend", "raf", "cancelAnimationFrame", "_calculateVisibleItems", "direction", "startPx", "endPx", "end", "topOverflow", "bottomOverflow", "bufferOverflow", "offset", "computedItems", "slice", "map", "item", "raw", "deep", "arr", "high", "low", "mid", "target", "makeVVirtualScrollProps", "propsFactory", "items", "type", "Array", "default", "renderless", "Boolean", "makeVirtualProps", "makeComponentProps", "makeDimensionProps", "VVirtualScroll", "genericComponent", "name", "props", "setup", "_ref", "slots", "vm", "getCurrentInstance", "dimensionStyles", "useDimension", "containerRef", "markerRef", "handleScroll", "handleScrollend", "handleItemResize", "scrollToIndex", "paddingTop", "paddingBottom", "computedItems", "useVirtual", "toRef", "useToggleScope", "handleListeners", "add", "arguments", "length", "undefined", "method", "value", "document", "documentElement", "passive", "onMounted", "getScrollParent", "vnode", "el", "onScopeDispose", "useRender", "children", "map", "item", "_createVNode", "VVirtualScrollItem", "index", "height", "slotProps", "raw", "_Fragment", "convertToUnit", "class", "style"]
}
